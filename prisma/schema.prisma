// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = "file:./dev.db"
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Profile with BMAD Nutrition Specialist data
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // BMAD Profile Extensions
  dateOfBirth   DateTime?
  gender        String?
  heightCm      Float?
  activityLevel String?
  goalType      String?

  // Calculated targets (from BMAD Nutrition Specialist)
  dailyCalories Int?
  proteinG      Int?
  carbsG        Int?
  fatG          Int?
  bmr           Int?
  tdee          Int?

  // Gamification
  currentLevel  Int @default(1)
  totalXp       Int @default(0)
  currentStreak Int @default(0)

  // Relationships
  weights       UserWeight[]
  foodEntries   FoodEntry[]
  achievements  UserAchievement[]
  favorites     UserFavorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enums converted to strings for SQLite compatibility
// Gender: "MALE", "FEMALE", "OTHER"
// ActivityLevel: "SEDENTARY", "LIGHTLY_ACTIVE", "MODERATELY_ACTIVE", "VERY_ACTIVE", "EXTREMELY_ACTIVE"
// GoalType: "LOSE_FAT", "GAIN_MUSCLE", "MAINTAIN_WEIGHT", "BODY_RECOMPOSITION"

// Weight tracking for BMI and progress
model UserWeight {
  id         String   @id @default(cuid())
  userId     String
  weightKg   Float
  recordedAt DateTime @default(now())
  source     String   @default("manual") // manual, healthkit, scale
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, recordedAt])
}

// USDA Food Database Integration
model Food {
  id              String  @id @default(cuid())
  fdcId           Int?    // USDA FoodData Central ID
  name            String
  brand           String?
  barcode         String?
  caloriesPer100g Float
  proteinPer100g  Float
  carbsPer100g    Float
  fatPer100g      Float
  fiberPer100g    Float   @default(0)
  sugarPer100g    Float   @default(0)
  sodiumPer100g   Float   @default(0)
  servingSizeG    Float?
  servingDesc     String?
  isVerified      Boolean @default(false)

  // Relationships
  entries   FoodEntry[]
  favorites UserFavorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([barcode])
}

// Daily food logging entries
model FoodEntry {
  id       String    @id @default(cuid())
  userId   String
  foodId   String
  mealType String
  quantityG Float
  loggedAt DateTime @default(now())
  date     DateTime @default(now())

  // Pre-calculated nutrition for performance
  calories Float
  protein  Float
  carbs    Float
  fat      Float

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([date, mealType])
}

// MealType: "BREAKFAST", "LUNCH", "DINNER", "SNACK"

// User favorite foods for quick logging
model UserFavorite {
  id               String @id @default(cuid())
  userId           String
  foodId           String
  typicalQuantityG Float?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, foodId])
}

// Gamification: Achievement system
model Achievement {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  category    String
  points      Int    @default(0)
  condition   String // JSON string describing unlock condition
  isActive    Boolean @default(true)

  users UserAchievement[]

  createdAt DateTime @default(now())
}

// AchievementCategory: "CONSISTENCY", "MACRO_ACCURACY", "STREAK", "MILESTONE", "SOCIAL"

// User earned achievements
model UserAchievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime @default(now())
  progressValue Int?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

// Daily nutrition summary for analytics (materialized view concept)
model DailyNutrition {
  id            String   @id @default(cuid())
  userId        String
  date          DateTime
  totalCalories Float    @default(0)
  totalProtein  Float    @default(0)
  totalCarbs    Float    @default(0)
  totalFat      Float    @default(0)

  // Target comparison
  calorieTarget   Int?
  proteinTarget   Int?
  carbsTarget     Int?
  fatTarget       Int?
  calorieAccuracy Float? // Percentage accuracy
  macroAccuracy   Float? // Overall macro accuracy

  loggedMeals Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}